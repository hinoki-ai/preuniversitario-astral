#!/usr/bin/env node

/**
 * Version Processor for gg
 *
 * This script detects .version-signal files and updates VERSION.md and package.json
 * It should be run by gg or as a git hook before commits.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SIGNAL_FILE = '.version-signal';
const VERSION_FILE = 'VERSION.md';
const PACKAGE_FILE = 'package.json';

function incrementVersion(currentVersion, type) {
  const [major, minor, patch] = currentVersion.split('.').map(Number);

  switch (type) {
    case 'major':
      return `${major + 1}.0.0`;
    case 'minor':
      return `${major}.${minor + 1}.0`;
    case 'patch':
      return `${major}.${minor}.${patch + 1}`;
    default:
      return currentVersion;
  }
}

function formatDate(date) {
  return date.toISOString().split('T')[0]; // YYYY-MM-DD format
}

function updatePackageJson(newVersion) {
  try {
    const packageData = JSON.parse(fs.readFileSync(PACKAGE_FILE, 'utf8'));
    packageData.version = newVersion;
    fs.writeFileSync(PACKAGE_FILE, JSON.stringify(packageData, null, 2) + '\n');
    console.log(`‚úÖ Updated ${PACKAGE_FILE} to version ${newVersion}`);
  } catch (error) {
    console.error(`‚ùå Failed to update ${PACKAGE_FILE}:`, error.message);
  }
}

function updateVisitorCounter(newVersion) {
  const counterFile = 'components/VisitorCounter.tsx';
  try {
    if (fs.existsSync(counterFile)) {
      let counterContent = fs.readFileSync(counterFile, 'utf8');

      // Update the version constant
      counterContent = counterContent.replace(
        /const VERSION = '[^']*'; \/\/ Auto-updated by version-processor\.js/,
        `const VERSION = '${newVersion}'; // Auto-updated by version-processor.js`
      );

      fs.writeFileSync(counterFile, counterContent);
      console.log(`‚úÖ Updated ${counterFile} with version ${newVersion}`);
    }
  } catch (error) {
    console.error(`‚ùå Failed to update VisitorCounter:`, error.message);
  }
}

function updateVersionLog(newVersion, signalData) {
  try {
    let versionContent = '';

    // Read existing VERSION.md if it exists
    if (fs.existsSync(VERSION_FILE)) {
      versionContent = fs.readFileSync(VERSION_FILE, 'utf8');
    } else {
      // Create basic structure if it doesn't exist
      versionContent = `# Version Log

This file is automatically managed by the gg script. Do not edit manually.

## Current Version
**v${newVersion}**

## Version History

---

*This changelog is auto-generated by gg on each version increment.*\n`;
    }

    // Update current version
    versionContent = versionContent.replace(
      /## Current Version\n\*\*v[\d\.]+\*\*/,
      `## Current Version\n**v${newVersion}**`
    );

    // Add new entry to version history
    const date = formatDate(new Date(signalData.timestamp));
    const historyEntry = `\n### v${newVersion} (${date})\n- ${signalData.message}\n`;

    // Insert after "## Version History" and before the first existing entry or the separator
    const historyMarker = '## Version History\n\n';
    const separatorIndex = versionContent.indexOf('\n---');
    const insertIndex = separatorIndex !== -1 ? separatorIndex : versionContent.length;

    versionContent = versionContent.slice(0, insertIndex) + historyEntry + versionContent.slice(insertIndex);

    fs.writeFileSync(VERSION_FILE, versionContent);
    console.log(`‚úÖ Updated ${VERSION_FILE} with new version ${newVersion}`);
  } catch (error) {
    console.error(`‚ùå Failed to update ${VERSION_FILE}:`, error.message);
  }
}

function processVersionSignal() {
  if (!fs.existsSync(SIGNAL_FILE)) {
    return false; // No signal to process
  }

  try {
    console.log('üîÑ Processing version signal...');
    const signalData = JSON.parse(fs.readFileSync(SIGNAL_FILE, 'utf8'));

    const newVersion = incrementVersion(signalData.currentVersion, signalData.type);

    console.log(`üì¶ Incrementing version: ${signalData.currentVersion} ‚Üí ${newVersion}`);
    console.log(`üìù Type: ${signalData.type}`);
    console.log(`üí¨ Message: ${signalData.message}`);

    // Update files
    updatePackageJson(newVersion);
    updateVersionLog(newVersion, signalData);
    updateVisitorCounter(newVersion);

    // Remove the signal file
    fs.unlinkSync(SIGNAL_FILE);
    console.log('‚úÖ Version signal processed and removed');

    return true;
  } catch (error) {
    console.error('‚ùå Failed to process version signal:', error.message);
    return false;
  }
}

// Main execution
if (processVersionSignal()) {
  console.log('üéâ Version increment completed successfully!');
} else {
  console.log('‚ÑπÔ∏è  No version signal found, skipping version processing.');
}